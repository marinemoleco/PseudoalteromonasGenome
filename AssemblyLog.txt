# Quality control
fastqc *.gz
multiqc .

# Sample Name	% Dups	% GC	M Seqs
# NG-19286_1783_0s_lib326994_6367_2_1	22.0%	47%	4.5
# NG-19286_1783_0s_lib326994_6367_2_2	22.0%	47%	4.5
# NG-19286_1783_0s_lib326994_6377_2_1	31.4%	47%	3.8
# NG-19286_1783_0s_lib326994_6377_2_2	30.9%	47%	3.8

# merge libraries
cat *_1.fastq.gz > NG_1783_R1.fastq.gz
cat *_2.fastq.gz > NG_1783_R2.fastq.gz

# spades de novo assembly
spades.py -1 NG_1783_R1.fastq.gz -2 NG_1783_R2.fastq.gz -o spades_NG_1783_denovo_cf_oa_v1 -t 2 -k 21,33,55,77 --careful --only-assembler

## possible deduplication and normalization steps before assembly ##
# 1. adapter and contamination removal

~/phylo/bbmap/bbduk.sh in1=NG_1783_R1.fastq.gz in2=NG_1783_R2.fastq.gz out1=NG_1783_R1_bbduk.fastq.gz out2=NG_1783_R2_bbduk.fastq.gz ref=~/phylo/bbmap/resources/adapters.fa ktrim=r k=23 mink=11 hdist=1 tpe tbo

BBDuk version 37.66
maskMiddle was disabled because useShortKmers=true
Initial:
Memory: max=1407m, free=1376m, used=31m

Added 216529 kmers; time: 	0.372 seconds.
Memory: max=1407m, free=1310m, used=97m

Input is being processed as paired
Started output streams:	0.362 seconds.
Processing time:   		500.187 seconds.

Input:                  	16560750 reads 		2500673250 bases.
KTrimmed:               	109614 reads (0.66%) 	2898976 bases (0.12%)
Trimmed by overlap:     	52638 reads (0.32%) 	495056 bases (0.02%)
Total Removed:          	50 reads (0.00%) 	3394032 bases (0.14%)
Result:                 	16560700 reads (100.00%) 	2497279218 bases (99.86%)

Time:   			500.947 seconds.
Reads Processed:      16560k 	33.06k reads/sec
Bases Processed:       2500m 	4.99m bases/sec

# normalization
~/phylo/bbmap/bbnorm.sh in1=NG_1783_R1_bbduk.fastq.gz in2=NG_1783_R2_bbduk.fastq.gz out1=NG_1783_R1_bbduk_bbnorm.fastq.gz out2=NG_1783_R2_bbduk_bbnorm.fastq.gz target=100 min=3

# deduplication
~/phylo/bbmap/dedupe.sh in1=NG_1783_R1_bbduk_bbnorm.fastq.gz in2=NG_1783_R2_bbduk_bbnorm.fastq.gz out=NG_1783_bbduk_bbnorm_dedup.fastq.gz ac=f
reformat.sh in=NG_1783_bbduk_bbnorm_dedup.fastq.gz out1=NG_1783_R1_bbduk_bbnorm_dedup.fastq.gz out2=NG_1783_R2_bbduk_bbnorm_dedup.fastq.gz

Pair Limitations:
Dedupe supports paired reads, but it was not really designed for them. When processing paired reads, some parts of Dedupe are restricted to a single thread due to a complication that causes non-deterministic output. As such, processing paired reads is slower than unpaired reads. Also, pair support is limited to exact matches and overlaps, not containments.

# alternativy

# clumpify and deduplication
clumpify.sh in=reads.fq.gz out=clumped.fq.gz dedupe subs=0

Paired reads:
Clumpify supports paired reads, in which case it will clump based on read 1 only. However, itâ€™s much more effective to treat reads as unpaired. For example, merge the reads with BBMerge, then concatenate the merged reads with the unmerged pairs, and clump them all together as unpaired.

# PE merge - optional might need concatenation of unmerged reads
bbmerge.sh in1=NG_1783_R1.fastq.gz in2=NG_1783_R2.fastq.gz out=NG_1783_merged.fastq.gz outu=NG_1783_unmerged.fastq.gz ihist=ihist.txt
